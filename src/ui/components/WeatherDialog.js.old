// Weather generation dialog 
import React, { useState, useEffect } from 'react';
import { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Wind, Thermometer, Cloud, Sun, Moon, Compass, Settings2 } from 'lucide-react';

const WeatherDialog = () => {
  const [currentWeather, setCurrentWeather] = useState({
    temperature: {
      base: 65,
      adjusted: 65,
      adjustments: {
        latitude: 0,
        elevation: 0,
        extreme: 0
      }
    },
    windSpeed: 0,
    windDirection: 'North',
    precipitation: 'None',
    specialEffects: [],
    moonPhase: 'Full Moon',
    visibility: 'Normal'
  });

  const [showSettings, setShowSettings] = useState(false);
  const [settings, setSettings] = useState({
    month: 1, // 1-16 for Greyhawk months
    latitudeHexes: 0, // Distance from 40th parallel in hexes
    elevation: 0,
    terrain: 'plains'
  });

  const months = [
    'Needfest', 'Fireseek', 'Readying', 'Coldeven', 'Growfest',
    'Planting', 'Flocktime', 'Wealsun', 'Richfest', 'Reaping',
    'Goodmonth', 'Harvester', 'Brewfest', 'Patchwall', 'Ready\'reat', 'Sunsebb'
  ];

  const terrainTypes = [
    'plains', 'forest', 'hills', 'mountains', 
    'desert', 'coastal', 'ocean', 'arctic',
    'swamp', 'urban', 'underdark', 'tropical'
  ];

  const getWindEffectDescription = (speed) => {
    if (speed < 2) return 'No effect';
    if (speed < 30) return 'All travel slowed by 25%; torches will be blown out';
    if (speed < 45) return 'All travel slowed by 50%; torches and small fires blown out';
    if (speed < 60) return 'Small trees uprooted; travel slowed 75%; roofs may tear off';
    return 'Only strong stone buildings undamaged; travel impossible';
  };

  const getTemperatureEffect = (temp) => {
    if (temp < 35) return 'Cold weather gear required. Check wind chill.';
    if (temp > 75) return 'Heat effects may apply. Check humidity.';
    return 'Comfortable temperature range';
  };

  const calculateTemperatureAdjustments = (baseTemp, latitudeHexes, elevation) => {
    // Add 2°F for every 2 1/3 hexes south of 40th parallel
    // Subtract 2°F for every 2 1/3 hexes north
    const latitudeAdjustment = Math.floor(latitudeHexes / 2.33) * 2;
    
    // -3°F per 1000 feet elevation
    const elevationAdjustment = Math.floor(elevation / 1000) * -3;

    return {
      latitudeAdjustment,
      elevationAdjustment,
      total: latitudeAdjustment + elevationAdjustment
    };
  };

  const checkExtremeTemperatures = async () => {
    const weather = game.modules.get('dnd-weather').weatherSystem;
    const roll = await weather.rollDice(1, 100)[0];
    
    if (roll <= 1) return -3; // Extreme record low
    if (roll === 2) return -2; // Severe record low
    if (roll <= 4) return -1; // Record low
    if (roll >= 97 && roll <= 98) return 1; // Record high
    if (roll === 99) return 2; // Severe record high
    if (roll === 100) return 3; // Extreme record high
    return 0; // Normal temperatures
  };

  const generateWeather = async () => {
    const weather = game.modules.get('dnd-weather').weatherSystem;
    
    // Calculate base temperature from month and settings
    const baseTemp = await weather.tempCalculator.calculateBaseTemperature(settings.month);
    
    // Calculate adjustments
    const adjustments = calculateTemperatureAdjustments(
      baseTemp,
      settings.latitudeHexes,
      settings.elevation
    );

    // Check for extreme temperatures
    const extremeMultiplier = await checkExtremeTemperatures();
    const extremeAdjustment = extremeMultiplier * 10;

    // Generate precipitation and conditions
    const skyRoll = await weather.rollDice(1, 100)[0];
    const skyConditions = skyRoll <= 30 ? 'Clear' : 
                         skyRoll <= 70 ? 'Partly Cloudy' : 
                         'Cloudy';

    const precipitation = await weather.precipHandler.determinePrecipitation(
      baseTemp + adjustments.total + extremeAdjustment
    );

    const wind = await weather.windSystem.calculateWindConditions(
      precipitation.hasPrecipitation
    );

    const moonPhase = await weather.moonTracker.calculateMoonPhase(new Date());

    // Update the display
    setCurrentWeather({
      temperature: {
        base: baseTemp,
        adjusted: baseTemp + adjustments.total + extremeAdjustment,
        adjustments: {
          latitude: adjustments.latitudeAdjustment,
          elevation: adjustments.elevationAdjustment,
          extreme: extremeAdjustment
        }
      },
      windSpeed: wind.speed,
      windDirection: wind.direction,
      precipitation: precipitation.type || 'None',
      specialEffects: [],
      moonPhase,
      visibility: precipitation.visibility || 'Normal'
    });
  };

  const handleSettingsSubmit = (e) => {
    e.preventDefault();
    setShowSettings(false);
    generateWeather();
  };

  const SettingsForm = () => (
    <AlertDialog open={showSettings} onOpenChange={setShowSettings}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Weather Settings</AlertDialogTitle>
        </AlertDialogHeader>
        <form onSubmit={handleSettingsSubmit} className="space-y-4">
          <div className="grid gap-4">
            <div>
              <label className="block text-sm font-medium">Month</label>
              <select 
                className="mt-1 block w-full rounded-md border-gray-300"
                value={settings.month}
                onChange={e => setSettings({...settings, month: parseInt(e.target.value)})}
              >
                {months.map((month, i) => (
                  <option key={month} value={i+1}>{month}</option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium">
                Distance from 40° parallel (in hexes)
              </label>
              <input
                type="number"
                className="mt-1 block w-full rounded-md border-gray-300"
                value={settings.latitudeHexes}
                onChange={e => setSettings({...settings, latitudeHexes: parseInt(e.target.value)})}
              />
              <span className="text-xs text-gray-500">Positive = North, Negative = South</span>
            </div>
            <div>
              <label className="block text-sm font-medium">Elevation (feet)</label>
              <input
                type="number"
                className="mt-1 block w-full rounded-md border-gray-300"
                value={settings.elevation}
                onChange={e => setSettings({...settings, elevation: parseInt(e.target.value)})}
              />
            </div>
            <div>
              <label className="block text-sm font-medium">Terrain</label>
              <select
                className="mt-1 block w-full rounded-md border-gray-300"
                value={settings.terrain}
                onChange={e => setSettings({...settings, terrain: e.target.value})}
              >
                {terrainTypes.map(terrain => (
                  <option key={terrain} value={terrain}>
                    {terrain.charAt(0).toUpperCase() + terrain.slice(1)}
                  </option>
                ))}
              </select>
            </div>
          </div>
          <div className="flex justify-end space-x-2">
            <button
              type="button"
              onClick={() => setShowSettings(false)}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700"
            >
              Generate Weather
            </button>
          </div>
        </form>
      </AlertDialogContent>
    </AlertDialog>
  );

  return (
    <div className="w-full max-w-4xl p-4">
      <Card className="mb-4">
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Current Weather Conditions</span>
            <div className="flex gap-2">
              <button
                onClick={() => setShowSettings(true)}
                className="p-1 rounded-full hover:bg-gray-100"
              >
                <Settings2 className="h-6 w-6 text-gray-500" />
              </button>
              <Sun className="h-6 w-6 text-yellow-500" />
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {/* Existing weather display sections */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Temperature Section */}
            <div className="flex items-center space-x-2 p-2 border rounded">
              <Thermometer className="h-5 w-5 text-red-500" />
              <div>
                <div className="font-semibold">{currentWeather.temperature.adjusted}°F</div>
                <div className="text-xs text-gray-500">Base: {currentWeather.temperature.base}°F</div>
                <div className="text-sm text-gray-600">
                  {getTemperatureEffect(currentWeather.temperature.adjusted)}
                </div>
              </div>
            </div>

            {/* Existing sections... */}
            {/* Wind Section */}
            <div className="flex items-center space-x-2 p-2 border rounded">
              <Wind className="h-5 w-5 text-blue-500" />
              <div>
                <div className="font-semibold">{currentWeather.windSpeed} mph</div>
                <div className="text-sm text-gray-600">
                  {getWindEffectDescription(currentWeather.windSpeed)}
                </div>
              </div>
            </div>

            {/* Precipitation Section */}
            <div className="flex items-center space-x-2 p-2 border rounded">
              <Cloud className="h-5 w-5 text-gray-500" />
              <div>
                <div className="font-semibold">Precipitation</div>
                <div className="text-sm text-gray-600">
                  {currentWeather.precipitation}
                </div>
              </div>
            </div>

            {/* Moon Phase Section */}
            <div className="flex items-center space-x-2 p-2 border rounded">
              <Moon className="h-5 w-5 text-gray-700" />
              <div>
                <div className="font-semibold">Moon Phase</div>
                <div className="text-sm text-gray-600">
                  {currentWeather.moonPhase}
                </div>
              </div>
            </div>

            {/* Wind Direction */}
            <div className="flex items-center space-x-2 p-2 border rounded">
              <Compass className="h-5 w-5 text-indigo-500" />
              <div>
                <div className="font-semibold">Wind Direction</div>
                <div className="text-sm text-gray-600">
                  {currentWeather.windDirection}
                </div>
              </div>
            </div>

            {/* Visibility */}
            <div className="flex items-center space-x-2 p-2 border rounded">
              <Sun className="h-5 w-5 text-orange-500" />
              <div>
                <div className="font-semibold">Visibility</div>
                <div className="text-sm text-gray-600">
                  {currentWeather.visibility}
                </div>
              </div>
            </div>
          </div>

          {/* Special Effects Section */}
          {currentWeather.specialEffects.length > 0 && (
            <div className="mt-4 p-2 border rounded bg-yellow-50">
              <h3 className="font-semibold text-yellow-800">Special Effects</h3>
              <ul className="list-disc list-inside text-sm text-yellow-700">
                {currentWeather.specialEffects.map((effect, index) => (
                  <li key={index}>{effect}</li>
                ))}
              </ul>
            </div>
          )}
        </CardContent>
      </Card>
      
      {/* Settings Dialog */}
      <SettingsForm />
    </div>
  );
};

export default WeatherDialog;