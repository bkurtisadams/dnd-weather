// Main system entry point 
class WeatherGenerator {
    constructor() {
        this.calendar = game.modules.get('simple-calendar')?.api;
        this.terrainEffects = new TerrainEffects();
        this.phenomena = new WeatherPhenomena();
        this.specialPhenomena = new SpecialWeatherPhenomena();
    }

    async generateWeather(location) {
        const { terrain, latitude, elevation, isCoastal } = location;
        const currentDate = this.calendar.getCurrentDate();
        
        // Base calculations
        const baseTemp = this.calculateBaseTemperature(currentDate, latitude, elevation);
        const terrainMods = this.terrainEffects.getTerrainModifiers(terrain, baseTemp);
        
        // Apply modifiers
        const temperature = baseTemp + terrainMods.temperatureMod;
        const windSpeed = this.rollWindSpeed() + terrainMods.windSpeedMod;
        const windChill = this.calculateWindChill(temperature, windSpeed);
        
        // Check for special events
        const specialEvent = Math.random() < 0.05 ? 
            this.terrainEffects.rollSpecialEvent(terrain) : null;
            
        // Determine precipitation
        const precipitation = await this.determinePrecipitation(
            temperature,
            terrainMods.precipitationMod,
            terrain
        );

        return {
            temperature,
            windSpeed,
            windChill,
            precipitation,
            specialEvent,
            effects: this.calculateEffects(temperature, windSpeed, precipitation)
        };
    }

    calculateEffects(temp, wind, precip) {
        const effects = [];
        
        // Temperature effects
        if (temp <= 35 && wind >= 5) {
            effects.push('WIND_CHILL');
        }
        if (temp <= 0) {
            effects.push('COLD_WEATHER_GEAR');
        }
        if (temp >= 75) {
            effects.push('HOT_WEATHER_CHECK');
        }
        
        // Wind effects
        if (wind >= 30) {
            effects.push('HIGH_WIND');
        }
        if (wind >= 45) {
            effects.push('SEVERE_WIND');
        }
        
        // Vision/tracking effects
        if (precip && precip.type) {
            effects.push(...this.phenomena.PHENOMENA[precip.type].vision);
        }
        
        return effects;
    }

    private calculateBaseTemperature(date, latitude, elevation) {
        // Get season multiplier from calendar
        const season = this.calendar.getAllSeasons().find(s => 
            this.calendar.dateInSeason(date, s));
        const seasonMod = season.temp_mod || 0;
        
        // Base temperature curve
        const baseTemp = 70 - (Math.abs(latitude) * 2);
        
        // Apply elevation and seasonal mods
        return baseTemp + seasonMod - (elevation * 0.003);
    }

    private async determinePrecipitation(temp, precipMod, terrain) {
        const chance = 20 + precipMod; // Base 20% chance
        if (Math.random() * 100 > chance) return null;
        
        // Get valid precipitation types for temperature
        const validTypes = Object.entries(this.phenomena.PHENOMENA)
            .filter(([type, data]) => {
                if (!data.temperature) return true;
                const { min, max } = data.temperature;
                return (!min || temp >= min) && (!max || temp <= max);
            })
            .filter(([type]) => {
                // Check terrain restrictions
                const restrictions = this.terrainEffects.TERRAIN_DATA[terrain]?.restrictions;
                return !restrictions?.includes(type);
            });
            
        if (!validTypes.length) return null;
        
        // Select random valid type
        const [type, data] = validTypes[Math.floor(Math.random() * validTypes.length)];
        
        return {
            type,
            amount: data.precipitation ? data.precipitation() : 0,
            duration: data.duration(),
            effects: data.effects || {}
        };
    }
}

export default WeatherGenerator;